% Задание 2. Итерационные алгоритмы и рекурсия

Задание 1
---------

Как известно, $arctg~x$ (арктангенс) -- тригонометрическая функция, [обратная](https://ru.wikipedia.org/wiki/Обратные_тригонометрические_функции) к тангенсу.

$arctg~x$ -- бесконечно дифференцируемая функция, а значит, её можно разложить в бесконечную сумму степенных функций (см. [ряд Тейлора](https://ru.wikipedia.org/wiki/Ряд_Тейлора)):

$$ arctg~x = x - \frac{x^3}{3} + \frac{x^5}{5} - \frac{x^7}{7} + \frac{x^9}{9} - \cdots. $$

Требуется написать функцию `atan'`, вычисляющую арктангенс в точке $x$ по формуле разложения в ряд Тейлора с заданной точностью $\varepsilon > 0$.

Задание 2
---------

_Математики доказали_:

если $f$ -- функция, [непрерывная](https://ru.wikipedia.org/wiki/Непрерывная_функция) на отрезке $[a,b]$, и на концах отрезка принимает значения разного знака: $sign(f(a)) \ne sign(f(b))$, то где-то внутри отрезка $[a,b]$ имеется точка $c$, такая, что $f(c) = 0$.

Это следствие из [теоремы о промежуточном значении](https://ru.wikipedia.org/wiki/Теорема_о_промежуточном_значении), также известной как теорема Больцано-Коши, позволяет приближенно (с заданной точностью $\varepsilon > 0$) находить корни уравнения $f(x) = 0$ для любой функции $f(x)$, лишь бы она была непрерывной, и были известны две точки $a$ и $b$, в которых $f(a)$ и $f(b)$ имеют разный знак.

Сформулируем алгоритм поиска корней уравнения $f(x) = 0$ на отрезке $[a,b]$ с заданной точностью $\varepsilon > 0$:

1. Определим середину отрезка: $c = \frac{a + b}{2}$.
2. Если $|f(c)| < \varepsilon$ (предполагается что $\varepsilon$ -- некоторое очень малое дробное число), то решение уравнения найдено -- это точка $c$.
3. Иначе рассматриваются два отрезка: $[a,c]$ и $[b,c]$. Из них выбирается такой, что граничные точки имеют разный знак, _корень ищется внутри нового отрезка_.

Предлагается:

1. написать функцию `solver`:
   * имеющую сигнатуру `solver :: (Double -> Double) -> Double -> Double -> Double -> Double`;
   * принимающущю первым параметром функцию $f(x)$, вторым и третьим параметром границы отрезка $[a,b]$, четвертым параметром -- число $\varepsilon$;
   * осуществляющую поиск корня уравнения $f(x) = 0$ с помощью представленного выше алгоритма.
2. использовать `solver` для нахождения корней уравнения $2^x = x^2$ при $x > 0$ и $x < 0$.

__FYI__: в базовой библиотеке языка Haskell [есть](https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html#v:signum) полезная функция `signum`...

Задание 3
---------

Последовательность чисел Фибоначчи задается рекуррентным соотношением:

$$ F_0 = 1,~F_1 = 1, $$
$$ F_n = F_{n-1} + F_{n-2},~n \ge 2. $$

Реализация функции получения $n$-го числа Фибоначчи, основанная на прямом рекурсивном определении, записывается элементарно:

> fib 0 = 1
> fib 1 = 1
> fib n | n < 0 = error "n must be greater than or equal to 0"
> fib n = fib (n - 1) + fib (n - 2)

Однако, функция `fib` является крайне неэффективной -- количество её вызовов растёт экспоненциально с ростом значения аргумента.

Предлагается написать более эффективную реализацию, имеющую линейную сложность (по числу рекурсивных вызовов), используя механизм аккумуляторов и хвостовую рекурсию.

__FYI__: в GHCi встроен инструмент, позволяющий оценивать использование памяти и затраты времени на вычисление выражения:
```bash
GHCI> :set +s
GHCI> fib 30
832040 
(8.36 secs, 298293400 bytes)
```
